% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Analyses.CopyNumber.Genes.All.R
\name{Analyses.CopyNumber.Genes.All}
\alias{Analyses.CopyNumber.Genes.All}
\title{Retrieve all data by genes Gistic2 results.}
\usage{
Analyses.CopyNumber.Genes.All(format = "csv", cohort = "", gene = "",
  tcga_participant_barcode = "", page = 1, page_size = 250,
  sort_by = "cohort")
}
\arguments{
\item{format}{A string identifying the data type returned. Using json
requires the jsonlite package. \code{json}, \code{csv} or \code{tsv} are
available. In this package \code{tsv} and \code{csv} are identical.}

\item{cohort}{A character vector indicating the cohort to query,
empty string queries all cohorts. See \code{\link{Metadata.Cohorts}} for
available cohorts.}

\item{gene}{A character vector of gene symbols. At least one gene OR Barcode
is required.}

\item{tcga_participant_barcode}{A character vector containing TCGA Barcodes.
Empty string returns all patients. Either one gene OR barcode is required.}

\item{page}{Subset to be returned.}

\item{page_size}{Number of records per page, max. is 2000.}

\item{sort_by}{character indicating the to column which is used for sorting.}
}
\value{
A \code{list}, if format is \code{json}, elsewise a \code{data.frame}
}
\description{
This service provides access to the Gistic2 all_data_by_genes.txt output
data. This data is a gene-level table of copy number values for all samples.
The returned copy number values are in units (copy number - 2) so that no
amplification or deletion is 0, genes with amplifications have positive
values, and genes with deletions are negative values. The data are converted
from marker level to gene level using the extreme method: a gene is assigned
the greatest amplification or the least deletion value among the markers it
covers. Results may be filtered by cohort, gene, or barcode, but at least
gene or barcode must be supplied.
}
\examples{
format = "csv"
cohort = "PRAD"
gene = "PTEN"
tcga_participant_barcode = c("TCGA-J4-A67O", "TCGA-G9-6496")
page = 1
page_size = 250
sort_by = "cohort"

obj = Analyses.CopyNumber.Genes.All(format = format,
                                cohort = cohort,
                                gene = gene,
                                tcga_participant_barcode = tcga_participant_barcode,
                                page = page,
                                page_size = page_size,
                                sort_by = sort_by)

gene = ""
obj = Analyses.CopyNumber.Genes.All(format = format,
                                cohort = cohort,
                                gene = gene,
                                tcga_participant_barcode = tcga_participant_barcode,
                                page = page,
                                page_size = page_size,
                                sort_by = sort_by)

format = "json"
obj = Analyses.CopyNumber.Genes.All(format = format,
                                cohort = cohort,
                                gene = gene,
                                tcga_participant_barcode = tcga_participant_barcode,
                                page = page,
                                page_size = page_size,
                                sort_by = sort_by)

}

