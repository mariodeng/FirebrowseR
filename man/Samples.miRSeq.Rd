% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Samples.mirSeq.R
\name{Samples.miRSeq}
\alias{Samples.miRSeq}
\title{Retrieve miRSeq data}
\usage{
Samples.miRSeq(format = "csv", mir = "", cohort = "",
  tcga_participant_barcode = "", tool = "miRseq_Mature_Preprocess",
  sample_type = "", page = 1, page_size = 250, sort_by = "mir")
}
\arguments{
\item{format}{A string identifying the data type returned. Using json
requires the jsonlite package. \code{json}, \code{csv} or \code{tsv} are
available. In this package \code{tsv} and \code{csv} are identical.}

\item{mir}{A character vector of miR names. At least one miR or barcode is
required.}

\item{cohort}{A character vector indicating the cohort to query,
empty string queries all cohorts. See \code{\link{Metadata.Cohorts}} for
available cohorts.}

\item{tcga_participant_barcode}{A character vector containing TCGA Barcodes.
Empty string returns all patients. Either one gene OR barcode is required.}

\item{tool}{The tool used to run the anylses, either
\code{miRseq_Mature_Preprocess}  or \code{miRseq_Preprocess}}

\item{sample_type}{A character vector indicating the sample types to query.
Empty string returns all types. See \code{\link{Metadata.SampleTypes}},
for available sample types.}

\item{page}{Subset to be returned.}

\item{page_size}{Number of records per page, max. is 2000.}

\item{sort_by}{character indicating the to column which is used for sorting.}
}
\value{
A \code{list}, if format is \code{json}, elsewise a \code{data.frame}
}
\description{
This service returns sample-level log2 miRSeq expression values. Results may
be filtered by miR, cohort, barcode, sample type or Firehose preprocessing
tool, but at least one miR OR barcode must be supplied.
}
\examples{
format = "json"
mir = c("hsa-mir-1285-3p","hsa-mir-125a-5p","hsa-mir-221-3p",
        "hsa-mir-10b-5p","hsa-mir-608","hsa-mir-324-5p")
cohort = "BRCA"
tcga_participant_barcode = ""
tool = "miRseq_Mature_Preprocess"
sample_type = "NT"
page = 1
page_size = 250
sort_by = "mir"

# Get results in json format/list
obj = Samples.miRSeq(format = format,
                        mir = mir,
                        cohort = cohort,
                        tcga_participant_barcode = tcga_participant_barcode,
                        tool = tool,
                        sample_type = sample_type,
                        page = page,
                        page_size = page_size,
                        sort_by = sort_by)

# Nor as CSV
format = "csv"
mir = c("hsa-mir-1285-3p", "hsa-mir-125a-5p")
obj = Samples.miRSeq(format = format,
                        mir = mir,
                        cohort = cohort,
                        tcga_participant_barcode = tcga_participant_barcode,
                        tool = tool,
                        sample_type = sample_type,
                        page = page,
                        page_size = page_size,
                        sort_by = sort_by)

# And just by miR IDs, without any other restrictions
obj = Samples.miRSeq(mir = c("hsa-mir-1285-3p","hsa-mir-125a-5p"))

}

